basePath: /
definitions:
  handlers.CheckoutRequest:
    properties:
      username:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
  handlers.MessageResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  handlers.ModifyCartRequest:
    properties:
      productid:
        type: integer
      quantity:
        type: integer
      unitPrice:
        type: number
      username:
        type: string
    type: object
  handlers.PurchaseResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.CartItem:
    properties:
      created_at:
        type: string
      id:
        type: integer
      productid:
        type: integer
      quantity:
        type: integer
      total_price:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GenericResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  models.SessionDoc:
    description: This is the session model used for Swagger documentation
    properties:
      created_at:
        type: string
      id:
        type: integer
      session_key:
        type: string
      updated_at:
        type: string
    type: object
  models.UploadSuccessResponse:
    properties:
      filepath:
        type: string
      message:
        type: string
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:7777
info:
  contact: {}
  description: This is the backend API for the RoastWear application.
  title: RoastWear API
  version: "1.0"
paths:
  /cart/items:
    get:
      consumes:
      - application/json
      description: Fetches all cart items associated with a username
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CartItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
      summary: Get cart items
      tags:
      - cart
  /cart/modify:
    post:
      consumes:
      - application/json
      description: Adds an item to the user's cart, updates quantity, or deletes it
        if quantity is 0.
      parameters:
      - description: Cart item details
        in: body
        name: cartItem
        required: true
        schema:
          $ref: '#/definitions/handlers.ModifyCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
      summary: Modify user's cart
      tags:
      - cart
  /checkout:
    post:
      consumes:
      - application/json
      description: Processes the items in the user's cart, creates a purchase record,
        and clears the cart.
      parameters:
      - description: Checkout request with username
        in: body
        name: checkoutRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.CheckoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Purchase completed and cart cleared
          schema:
            $ref: '#/definitions/handlers.PurchaseResponse'
        "400":
          description: Invalid input or empty cart
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error during purchase processing
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Checkout and complete purchase
      tags:
      - purchase
  /logout:
    post:
      consumes:
      - application/json
      description: Destroys the user session and logs the user out
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Logs out a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user by creating an account with the provided username,
        email, and password. If the user already exists (either by username or email),
        an error is returned. If there are missing fields, a validation error is returned.
        Includes a detailed response for successful registration or error scenarios.
      parameters:
      - description: User registration details (username, email, and password)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request, invalid request format
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict error, username or email already exists
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error, missing required fields (username, email,
            or password)
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /session/create:
    post:
      consumes:
      - application/json
      description: Stores a session in the database (used for login/session tracking)
      parameters:
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.SessionDoc'
      produces:
      - application/json
      responses:
        "201":
          description: Session successfully created
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "400":
          description: Invalid session data
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Create a new user session
      tags:
      - Session
  /session/delete:
    delete:
      consumes:
      - application/json
      description: Removes a session from the database
      parameters:
      - description: Session details
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.SessionDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Delete session
      tags:
      - Session
  /session/verify:
    post:
      consumes:
      - application/json
      description: Validates a session by username and session ID
      parameters:
      - description: Session details
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.SessionDoc'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.GenericResponse'
      summary: Verify session
      tags:
      - Session
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Allows a user to upload a PNG image with a username. The image
        is stored on the server and the metadata is saved to the database.
      parameters:
      - description: Username of the user uploading the image
        in: formData
        name: username
        required: true
        type: string
      - description: PNG image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UploadSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Upload a PNG image
      tags:
      - Images
swagger: "2.0"
