basePath: /
definitions:
  models.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:7777
info:
  contact: {}
  description: This is the backend API for the RoastWear application.
  title: RoastWear API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with their credentials (username and password).
        Returns a session token on successful login. In case of errors, it provides
        appropriate status codes and error messages for invalid credentials, missing
        fields, or server issues.
      parameters:
      - description: User login credentials (username and password)
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, returns a success message
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request, invalid request format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized, invalid username or password
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error, missing required fields (username and password)
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user by creating an account with the provided username,
        email, and password. If the user already exists (either by username or email),
        an error is returned. If there are missing fields, a validation error is returned.
        Includes a detailed response for successful registration or error scenarios.
      parameters:
      - description: User registration details (username, email, and password)
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request, invalid request format
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict error, username or email already exists
          schema:
            additionalProperties: true
            type: object
        "422":
          description: Validation error, missing required fields (username, email,
            or password)
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
swagger: "2.0"
